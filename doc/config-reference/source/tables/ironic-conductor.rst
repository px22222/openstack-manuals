..
    Warning: Do not edit this file. It is automatically generated from the
    software project's code and your changes will be overwritten.

    The tool to generate this file lives in openstack-doc-tools repository.

    Please make any changes needed in the code, then run the
    autogenerate-config-doc tool from the openstack-doc-tools repository, or
    ask for help on the documentation mailing list, IRC channel or meeting.

.. _ironic-conductor:

.. list-table:: Description of conductor configuration options
   :header-rows: 1
   :class: config-ref-table

   * - Configuration option = Default value
     - Description
   * - **[conductor]**
     -
   * - ``api_url`` = ``None``
     - (String) URL of Ironic API service. If not set ironic can get the current value from the keystone service catalog. If set, the value must start with either http:// or https://.
   * - ``automated_clean`` = ``True``
     - (Boolean) Enables or disables automated cleaning. Automated cleaning is a configurable set of steps, such as erasing disk drives, that are performed on the node to ensure it is in a baseline state and ready to be deployed to. This is done after instance deletion as well as during the transition from a "manageable" to "available" state. When enabled, the particular steps performed to clean a node depend on which driver that node is managed by; see the individual driver's documentation for details. NOTE: The introduction of the cleaning operation causes instance deletion to take significantly longer. In an environment where all tenants are trusted (eg, because there is only one tenant), this option could be safely disabled.
   * - ``check_provision_state_interval`` = ``60``
     - (Integer) Interval between checks of provision timeouts, in seconds.
   * - ``clean_callback_timeout`` = ``1800``
     - (Integer) Timeout (seconds) to wait for a callback from the ramdisk doing the cleaning. If the timeout is reached the node will be put in the "clean failed" provision state. Set to 0 to disable timeout.
   * - ``configdrive_swift_container`` = ``ironic_configdrive_container``
     - (String) Name of the Swift container to store config drive data. Used when configdrive_use_swift is True.
   * - ``configdrive_use_swift`` = ``False``
     - (Boolean) Whether to upload the config drive to Swift.
   * - ``deploy_callback_timeout`` = ``1800``
     - (Integer) Timeout (seconds) to wait for a callback from a deploy ramdisk. Set to 0 to disable timeout.
   * - ``force_power_state_during_sync`` = ``True``
     - (Boolean) During sync_power_state, should the hardware power state be set to the state recorded in the database (True) or should the database be updated based on the hardware state (False).
   * - ``heartbeat_interval`` = ``10``
     - (Integer) Seconds between conductor heart beats.
   * - ``heartbeat_timeout`` = ``60``
     - (Integer) Maximum time (in seconds) since the last check-in of a conductor. A conductor is considered inactive when this time has been exceeded.
   * - ``inspect_timeout`` = ``1800``
     - (Integer) Timeout (seconds) for waiting for node inspection. 0 - unlimited.
   * - ``node_locked_retry_attempts`` = ``3``
     - (Integer) Number of attempts to grab a node lock.
   * - ``node_locked_retry_interval`` = ``1``
     - (Integer) Seconds to sleep between node lock attempts.
   * - ``periodic_max_workers`` = ``8``
     - (Integer) Maximum number of worker threads that can be started simultaneously by a periodic task. Should be less than RPC thread pool size.
   * - ``power_state_sync_max_retries`` = ``3``
     - (Integer) During sync_power_state failures, limit the number of times Ironic should try syncing the hardware node power state with the node power state in DB
   * - ``send_sensor_data`` = ``False``
     - (Boolean) Enable sending sensor data message via the notification bus
   * - ``send_sensor_data_interval`` = ``600``
     - (Integer) Seconds between conductor sending sensor data message to ceilometer via the notification bus.
   * - ``send_sensor_data_types`` = ``ALL``
     - (List) List of comma separated meter types which need to be sent to Ceilometer. The default value, "ALL", is a special value meaning send all the sensor data.
   * - ``send_sensor_data_wait_timeout`` = ``300``
     - (Integer) The time in seconds to wait for send sensors data periodic task to be finished before allowing periodic call to happen again. Should be less than send_sensor_data_interval value.
   * - ``send_sensor_data_workers`` = ``4``
     - (Integer) The maximum number of workers that can be started simultaneously for send data from sensors periodic task.
   * - ``soft_power_off_timeout`` = ``600``
     - (Integer) Timeout (in seconds) of soft reboot and soft power off operation. This value always has to be positive.
   * - ``sync_local_state_interval`` = ``180``
     - (Integer) When conductors join or leave the cluster, existing conductors may need to update any persistent local state as nodes are moved around the cluster. This option controls how often, in seconds, each conductor will check for nodes that it should "take over". Set it to a negative value to disable the check entirely.
   * - ``sync_power_state_interval`` = ``60``
     - (Integer) Interval between syncing the node power state to the database, in seconds.
   * - ``workers_pool_size`` = ``100``
     - (Integer) The size of the workers greenthread pool. Note that 2 threads will be reserved by the conductor itself for handling heart beats and periodic tasks.
