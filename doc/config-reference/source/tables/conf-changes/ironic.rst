New, updated, and deprecated options in Ocata for Bare Metal service
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

..
  Warning: Do not edit this file. It is automatically generated and your
  changes will be overwritten. The tool to do so lives in the
  openstack-doc-tools repository.

.. list-table:: New options
   :header-rows: 1
   :class: config-ref-table

   * - Option = default value
     - (Type) Help string
   * - ``[DEFAULT] default_boot_interface = None``
     - (StrOpt) Default boot interface to be used for nodes that do not have boot_interface field set. A complete list of boot interfaces present on your system may be found by enumerating the "ironic.hardware.interfaces.boot" entrypoint.
   * - ``[DEFAULT] default_console_interface = None``
     - (StrOpt) Default console interface to be used for nodes that do not have console_interface field set. A complete list of console interfaces present on your system may be found by enumerating the "ironic.hardware.interfaces.console" entrypoint.
   * - ``[DEFAULT] default_deploy_interface = None``
     - (StrOpt) Default deploy interface to be used for nodes that do not have deploy_interface field set. A complete list of deploy interfaces present on your system may be found by enumerating the "ironic.hardware.interfaces.deploy" entrypoint.
   * - ``[DEFAULT] default_inspect_interface = None``
     - (StrOpt) Default inspect interface to be used for nodes that do not have inspect_interface field set. A complete list of inspect interfaces present on your system may be found by enumerating the "ironic.hardware.interfaces.inspect" entrypoint.
   * - ``[DEFAULT] default_management_interface = None``
     - (StrOpt) Default management interface to be used for nodes that do not have management_interface field set. A complete list of management interfaces present on your system may be found by enumerating the "ironic.hardware.interfaces.management" entrypoint.
   * - ``[DEFAULT] default_portgroup_mode = active-backup``
     - (StrOpt) Default mode for portgroups. Allowed values can be found in the linux kernel documentation on bonding: https://www.kernel.org/doc/Documentation/networking/bonding.txt.
   * - ``[DEFAULT] default_power_interface = None``
     - (StrOpt) Default power interface to be used for nodes that do not have power_interface field set. A complete list of power interfaces present on your system may be found by enumerating the "ironic.hardware.interfaces.power" entrypoint.
   * - ``[DEFAULT] default_raid_interface = None``
     - (StrOpt) Default raid interface to be used for nodes that do not have raid_interface field set. A complete list of raid interfaces present on your system may be found by enumerating the "ironic.hardware.interfaces.raid" entrypoint.
   * - ``[DEFAULT] default_storage_interface = None``
     - (ListOpt) Default storage interface to be used for nodes that do not have storage_interface field set. A complete list of storage interfaces present on your system may be found by enumerating the "ironic.hardware.interfaces.storage" entrypoint.
   * - ``[DEFAULT] default_vendor_interface = None``
     - (StrOpt) Default vendor interface to be used for nodes that do not have vendor_interface field set. A complete list of vendor interfaces present on your system may be found by enumerating the "ironic.hardware.interfaces.vendor" entrypoint.
   * - ``[DEFAULT] enabled_boot_interfaces = pxe``
     - (ListOpt) Specify the list of boot interfaces to load during service initialization. Missing boot interfaces, or boot interfaces which fail to initialize, will prevent the ironic-conductor service from starting. At least one boot interface that is supported by each enabled hardware type must be enabled here, or the ironic-conductor service will not start. Must not be an empty list. The default value is a recommended set of production-oriented boot interfaces. A complete list of boot interfaces present on your system may be found by enumerating the "ironic.hardware.interfaces.boot" entrypoint. When setting this value, please make sure that every enabled hardware type will have the same set of enabled boot interfaces on every ironic-conductor service.
   * - ``[DEFAULT] enabled_console_interfaces = no-console``
     - (ListOpt) Specify the list of console interfaces to load during service initialization. Missing console interfaces, or console interfaces which fail to initialize, will prevent the ironic-conductor service from starting. At least one console interface that is supported by each enabled hardware type must be enabled here, or the ironic-conductor service will not start. Must not be an empty list. The default value is a recommended set of production-oriented console interfaces. A complete list of console interfaces present on your system may be found by enumerating the "ironic.hardware.interfaces.console" entrypoint. When setting this value, please make sure that every enabled hardware type will have the same set of enabled console interfaces on every ironic-conductor service.
   * - ``[DEFAULT] enabled_deploy_interfaces = iscsi, direct``
     - (ListOpt) Specify the list of deploy interfaces to load during service initialization. Missing deploy interfaces, or deploy interfaces which fail to initialize, will prevent the ironic-conductor service from starting. At least one deploy interface that is supported by each enabled hardware type must be enabled here, or the ironic-conductor service will not start. Must not be an empty list. The default value is a recommended set of production-oriented deploy interfaces. A complete list of deploy interfaces present on your system may be found by enumerating the "ironic.hardware.interfaces.deploy" entrypoint. When setting this value, please make sure that every enabled hardware type will have the same set of enabled deploy interfaces on every ironic-conductor service.
   * - ``[DEFAULT] enabled_hardware_types = ipmi``
     - (ListOpt) Specify the list of hardware types to load during service initialization. Missing hardware types, or hardware types which fail to initialize, will prevent the conductor service from starting. This option defaults to a recommended set of production-oriented hardware types. A complete list of hardware types present on your system may be found by enumerating the "ironic.hardware.types" entrypoint.
   * - ``[DEFAULT] enabled_inspect_interfaces = no-inspect``
     - (ListOpt) Specify the list of inspect interfaces to load during service initialization. Missing inspect interfaces, or inspect interfaces which fail to initialize, will prevent the ironic-conductor service from starting. At least one inspect interface that is supported by each enabled hardware type must be enabled here, or the ironic-conductor service will not start. Must not be an empty list. The default value is a recommended set of production-oriented inspect interfaces. A complete list of inspect interfaces present on your system may be found by enumerating the "ironic.hardware.interfaces.inspect" entrypoint. When setting this value, please make sure that every enabled hardware type will have the same set of enabled inspect interfaces on every ironic-conductor service.
   * - ``[DEFAULT] enabled_management_interfaces = ipmitool``
     - (ListOpt) Specify the list of management interfaces to load during service initialization. Missing management interfaces, or management interfaces which fail to initialize, will prevent the ironic-conductor service from starting. At least one management interface that is supported by each enabled hardware type must be enabled here, or the ironic-conductor service will not start. Must not be an empty list. The default value is a recommended set of production-oriented management interfaces. A complete list of management interfaces present on your system may be found by enumerating the "ironic.hardware.interfaces.management" entrypoint. When setting this value, please make sure that every enabled hardware type will have the same set of enabled management interfaces on every ironic-conductor service.
   * - ``[DEFAULT] enabled_power_interfaces = ipmitool``
     - (ListOpt) Specify the list of power interfaces to load during service initialization. Missing power interfaces, or power interfaces which fail to initialize, will prevent the ironic-conductor service from starting. At least one power interface that is supported by each enabled hardware type must be enabled here, or the ironic-conductor service will not start. Must not be an empty list. The default value is a recommended set of production-oriented power interfaces. A complete list of power interfaces present on your system may be found by enumerating the "ironic.hardware.interfaces.power" entrypoint. When setting this value, please make sure that every enabled hardware type will have the same set of enabled power interfaces on every ironic-conductor service.
   * - ``[DEFAULT] enabled_raid_interfaces = agent, no-raid``
     - (ListOpt) Specify the list of raid interfaces to load during service initialization. Missing raid interfaces, or raid interfaces which fail to initialize, will prevent the ironic-conductor service from starting. At least one raid interface that is supported by each enabled hardware type must be enabled here, or the ironic-conductor service will not start. Must not be an empty list. The default value is a recommended set of production-oriented raid interfaces. A complete list of raid interfaces present on your system may be found by enumerating the "ironic.hardware.interfaces.raid" entrypoint. When setting this value, please make sure that every enabled hardware type will have the same set of enabled raid interfaces on every ironic-conductor service.
   * - ``[DEFAULT] enabled_storage_interfaces = noop``
     - (ListOpt) Specify the list of storage interfaces to load during service initialization. Missing storage interfaces, or storage interfaces which fail to initialize, will prevent the ironic-conductor service from starting. At least one storage interface that is supported by each enabled hardware type must be enabled here, or the ironic-conductor service will not start. Must not be an empty list. The default value is a recommended set of production-oriented storage interfaces. A complete list of storage interfaces present on your system may be found by enumerating the "ironic.hardware.interfaces.storage" entrypoint. When setting this value, please make sure that every enabled hardware type will have the same set of enabled storage interfaces on every ironic-conductor service.
   * - ``[DEFAULT] enabled_vendor_interfaces = no-vendor``
     - (ListOpt) Specify the list of vendor interfaces to load during service initialization. Missing vendor interfaces, or vendor interfaces which fail to initialize, will prevent the ironic-conductor service from starting. At least one vendor interface that is supported by each enabled hardware type must be enabled here, or the ironic-conductor service will not start. Must not be an empty list. The default value is a recommended set of production-oriented vendor interfaces. A complete list of vendor interfaces present on your system may be found by enumerating the "ironic.hardware.interfaces.vendor" entrypoint. When setting this value, please make sure that every enabled hardware type will have the same set of enabled vendor interfaces on every ironic-conductor service.
   * - ``[conductor] send_sensor_data_wait_timeout = 300``
     - (IntOpt) The time in seconds to wait for send sensors data periodic task to be finished before allowing periodic call to happen again. Should be less than send_sensor_data_interval value.
   * - ``[conductor] send_sensor_data_workers = 4``
     - (IntOpt) The maximum number of workers that can be started simultaneously for send data from sensors periodic task.
   * - ``[conductor] soft_power_off_timeout = 600``
     - (IntOpt) Timeout (in seconds) of soft reboot and soft power off operation. This value always has to be positive.
   * - ``[deploy] default_boot_option = None``
     - (StrOpt) Default boot option to use when no boot option is requested in node's driver_info. Currently the default is "netboot", but it will be changed to "local" in the future. It is recommended to set an explicit value for this option.
   * - ``[glance] glance_api_version = 2``
     - (IntOpt) Glance API version (1 or 2) to use.
   * - ``[irmc] snmp_polling_interval = 10``
     - (IntOpt) SNMP polling interval in seconds
   * - ``[neutron] cleaning_network = None``
     - (StrOpt) Neutron network UUID or name for the ramdisk to be booted into for cleaning nodes. Required for "neutron" network interface. It is also required if cleaning nodes when using "flat" network interface or "neutron" DHCP provider. If a name is provided, it must be unique among all networks or cleaning will fail.
   * - ``[neutron] cleaning_network_security_groups =``
     - (ListOpt) List of Neutron Security Group UUIDs to be applied during cleaning of the nodes. Optional for the "neutron" network interface and not used for the "flat" or "noop" network interfaces. If not specified, default security group is used.
   * - ``[neutron] provisioning_network = None``
     - (StrOpt) Neutron network UUID or name for the ramdisk to be booted into for provisioning nodes. Required for "neutron" network interface. If a name is provided, it must be unique among all networks or deploy will fail.
   * - ``[neutron] provisioning_network_security_groups =``
     - (ListOpt) List of Neutron Security Group UUIDs to be applied during provisioning of the nodes. Optional for the "neutron" network interface and not used for the "flat" or "noop" network interfaces. If not specified, default security group is used.
   * - ``[pxe] pxe_bootfile_name_by_arch = {}``
     - (DictOpt) Bootfile DHCP parameter per node architecture. For example: aarch64:grubaa64.efi
   * - ``[pxe] pxe_config_template_by_arch = {}``
     - (DictOpt) On ironic-conductor node, template file for PXE configuration per node architecture. For example: aarch64:/opt/share/grubaa64_pxe_config.template

.. list-table:: New default values
   :header-rows: 1
   :class: config-ref-table

   * - Option
     - Previous default value
     - New default value
   * - ``[audit] audit_map_file``
     - ``/etc/ironic/ironic_api_audit_map.conf``
     - ``/etc/ironic/api_audit_map.conf``
   * - ``[audit] ignore_req_list``
     - ``None``
     -

.. list-table:: Deprecated options
   :header-rows: 1
   :class: config-ref-table

   * - Deprecated option
     - New Option
   * - ``[DEFAULT] rpc_thread_pool_size``
     - ``[DEFAULT] executor_thread_pool_size``
   * - ``[DEFAULT] use_syslog``
     - ``None``
   * - ``[keystone_authtoken] cafile``
     - ``[glance] cafile``
   * - ``[keystone_authtoken] cafile``
     - ``[swift] cafile``
   * - ``[keystone_authtoken] cafile``
     - ``[neutron] cafile``
   * - ``[keystone_authtoken] cafile``
     - ``[service_catalog] cafile``
   * - ``[keystone_authtoken] cafile``
     - ``[inspector] cafile``
   * - ``[keystone_authtoken] certfile``
     - ``[service_catalog] certfile``
   * - ``[keystone_authtoken] certfile``
     - ``[neutron] certfile``
   * - ``[keystone_authtoken] certfile``
     - ``[glance] certfile``
   * - ``[keystone_authtoken] certfile``
     - ``[inspector] certfile``
   * - ``[keystone_authtoken] certfile``
     - ``[swift] certfile``
   * - ``[keystone_authtoken] insecure``
     - ``[glance] insecure``
   * - ``[keystone_authtoken] insecure``
     - ``[inspector] insecure``
   * - ``[keystone_authtoken] insecure``
     - ``[swift] insecure``
   * - ``[keystone_authtoken] insecure``
     - ``[service_catalog] insecure``
   * - ``[keystone_authtoken] insecure``
     - ``[neutron] insecure``
   * - ``[keystone_authtoken] keyfile``
     - ``[inspector] keyfile``
   * - ``[keystone_authtoken] keyfile``
     - ``[swift] keyfile``
   * - ``[keystone_authtoken] keyfile``
     - ``[neutron] keyfile``
   * - ``[keystone_authtoken] keyfile``
     - ``[glance] keyfile``
   * - ``[keystone_authtoken] keyfile``
     - ``[service_catalog] keyfile``

